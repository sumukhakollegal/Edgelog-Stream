version: '3.8'

services:
  # Kafka-compatible message broker (lightweight alternative to Kafka)
  redpanda:
    image: vectorized/redpanda:latest
    container_name: edgelog-redpanda
    command:
      - redpanda
      - start
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --kafka-addr=PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr=0.0.0.0:8082
      - --advertise-pandaproxy-addr=localhost:8082
    ports:
      - "9092:9092"     # Kafka API
      - "8081:8081"     # Schema Registry
      - "8082:8082"     # REST Proxy
      - "9644:9644"     # Admin API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9644/v1/status/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - edgelog

  # Redpanda Console for Kafka UI
  redpanda-console:
    image: vectorized/console:latest
    container_name: edgelog-redpanda-console
    depends_on:
      - redpanda
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: redpanda:29092
    networks:
      - edgelog

  # ClickHouse - Analytics database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: edgelog-clickhouse
    ports:
      - "8123:8123"     # HTTP API
      - "9000:9000"     # Native protocol
    environment:
      CLICKHOUSE_DB: edgelog
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - ./docker/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - edgelog

  # Redis - Rate limiting, dedup cache, hot data cache
  redis:
    image: redis:7-alpine
    container_name: edgelog-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - edgelog

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: edgelog-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - edgelog

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: edgelog-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - edgelog

networks:
  edgelog:
    driver: bridge

volumes:
  clickhouse_data:
  redis_data:
  prometheus_data:
  grafana_data:
